using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Newtonsoft.Json;
using Ptolemy.Parameters;

namespace Ptolemy.Argo.Request {
    public class ArgoRequest {
        /// <summary>
        /// このリクエストを一意に表すID
        /// </summary>
        public Guid GroupId { get; set; }
        /// <summary>
        /// HSPICEへのパス
        /// </summary>
        public string HspicePath { get; set; }
        /// <summary>
        /// HSPICEへ渡したいオプションのリスト
        /// </summary>
        public List<string> HspiceOptions { get; set; }
        /// <summary>
        /// SEED値
        /// </summary>
        public long Seed { get; set; }
        /// <summary>
        /// Sweep回数
        /// </summary>
        public long Sweep { get; set; }
        /// <summary>
        /// Sweepの開始値
        /// </summary>
        public long SweepStart { get; set; }
        /// <summary>
        /// 温度
        /// </summary>
        public decimal Temperature { get; set; }
        /// <summary>
        /// トランジスタ情報
        /// </summary>
        public TransistorPair Transistors { get; set; }
        /// <summary>
        /// シミュレーション時間
        /// </summary>
        public RangeParameter Time { get; set; }
        /// <summary>
        /// .ICコマンド
        /// </summary>
        public List<string> IcCommands { get; set; }
        /// <summary>
        /// NetListへのパス
        /// </summary>
        public string NetList { get; set; }
        /// <summary>
        /// Includeするファイルのリスト
        /// </summary>
        public List<string> Includes { get; set; }
        /// <summary>
        /// 電源電圧
        /// </summary>
        public decimal Vdd { get; set; }
        /// <summary>
        /// グランド電圧
        /// </summary>
        public decimal Gnd { get; set; }
        /// <summary>
        /// プロットする信号線のリスト
        /// </summary>
        public List<string> Signals { get; set; }
        /// <summary>
        /// 出力ファイルへのパス
        /// </summary>
        public string ResultFile { get; set; }

        /// <summary>
        /// ArgoRequestをJsonから作る
        /// </summary>
        /// <param name="json"></param>
        /// <returns></returns>
        public static ArgoRequest FromJson(string json) => JsonConvert.DeserializeObject<ArgoRequest>(json);

        /// <summary>
        /// JsonをArgoRequestから作る
        /// </summary>
        /// <returns></returns>
        public string ToJson() => JsonConvert.SerializeObject(this);
        /// <summary>
        /// プロットする時間のリスト
        /// </summary>
        public List<decimal> PlotTimeList { get; set; }

        /// <summary>
        /// Jsonファイルを読んでArgoRequestを作る
        /// </summary>
        /// <param name="path"></param>
        /// <returns></returns>
        public static ArgoRequest FromFile(string path) {
            using var sr = new StreamReader(path);
            return FromJson(sr.ReadToEnd());
        }

        /// <summary>
        /// 予期されるレコード数を返す
        /// </summary>
        public long ExpectedRecords =>
            Signals != null && PlotTimeList != null ? Sweep * Signals.Count * PlotTimeList.Count : 0;

        /// <summary>
        /// SPIスクリプトをpathに書き込む
        /// </summary>
        /// <param name="path"></param>
        public void WriteSpiScript(string path) {
            var sb = new StringBuilder();

            // Comment
            sb.AppendLine("* Generated for: HSPICE");
            sb.AppendLine("* Generated by: Ptolemy.Argo");
            sb.AppendLine($"* Target: {NetList}");

            // Parameters
            sb.AppendLine(
                $".param vtn=AGAUSS({Transistors.Vtn.Threshold},{Transistors.Vtn.Sigma},{Transistors.Vtn.NumberOfSigma}) vtp=AGAUSS({Transistors.Vtp.Threshold},{Transistors.Vtp.Sigma},{Transistors.Vtp.NumberOfSigma})");
            sb.AppendLine(".option PARHIER=LOCAL");
            sb.AppendLine($".option SEED={Seed}");
            sb.AppendLine($".temp {Temperature}");
            sb.AppendLine($".IC {string.Join(" ", IcCommands)}");
            sb.AppendLine($"VDD VDD! 0 {Vdd}V");
            sb.AppendLine($"VGND GND! 0 {Gnd}V");

            // include extra files
            foreach (var include in Includes) {
                sb.AppendLine($".include '{include}'");
            }

            // include NetList
            if (File.Exists(NetList)) sb.AppendLine($".include '{NetList}'");
            else throw new FileNotFoundException("NetListが見つかりません", NetList);

            // write .tran command
            sb.AppendLine(
                $".tran {Time.Step} {Time.Stop} start={Time.Start} uic sweep monte={Sweep} firstrun={SweepStart}");
            sb.AppendLine(".option opfile=0");

            // write .print command
            sb.AppendLine($".print {string.Join(" ", Signals.Select(x => $"V({x})"))}");
            sb.AppendLine(".end");

            // write spi script to path
            using var sw = new StreamWriter(path, false, new UTF8Encoding(false));
            sw.WriteLine(sb.ToString());
        }
    }
}
