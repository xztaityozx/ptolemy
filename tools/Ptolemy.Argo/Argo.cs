using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using System.Text;
using System.Threading;
using Ptolemy.Argo.Request;
using Ptolemy.Parameters;
using ShellProgressBar;

namespace Ptolemy.Argo {

    public class Argo  {
        public const string ENV_ARGO_HSPICE = "ARGO_HSPICE";
        private readonly ArgoRequest request;
        private readonly string workDir;
        private readonly Guid id;
        private readonly Logger.Logger log;

        private readonly Subject<string> receiver;

        public IObservable<string> Receiver => receiver
            .Where(s => !string.IsNullOrEmpty(s))
            .SkipWhile(s => s[0] != 'x')
            .TakeWhile(s => s[0] != 'y')
            .Repeat();
            

        public Argo(ArgoRequest request, Logger.Logger log) {
            (this.request, workDir) = (request,
                Path.Combine(Path.GetTempPath(), "Ptolemy.Argo", request.GroupId.ToString()));
            this.log = log;
            if (!Directory.Exists(workDir)) Directory.CreateDirectory(workDir);

            id = Guid.NewGuid();
            receiver = new Subject<string>();
        }

        private string BuildCommand(string spi) {
            return $"{request.HspicePath} {string.Join(" ", request.HspiceOptions)} -i {spi}";
        }

        public (bool status, ArgoRequest result) Run(CancellationToken token) {
            try {
                var spi = MakeScript();
                token.ThrowIfCancellationRequested();
                var command = BuildCommand(spi);
                token.ThrowIfCancellationRequested();
                using (var exec = new Exec.Exec(token)) {
                    var stderr = new StringBuilder();
                    exec.Run(command, 
                        s => receiver.OnNext(s),
                        s => stderr.AppendLine(s), false);
                    

                    if (stderr.Length != 0) throw new ArgoException(stderr.ToString());
                    
                    
                    return (exec.ExitCode == 0, request);
                }
            }
            catch (ArgoException) {
                throw;
            }
            catch (OperationCanceledException) {
                throw;
            }
            catch (Exception e) {
                throw new ArgoException($"Unknown error has occured\n\tinnerException-->{e}");
            }
        }

        private string MakeScript() {
            var path = Path.Combine(workDir, id + ".spi");
            var sb = new StringBuilder();
            sb.AppendLine("* Generated for: HSPICE");
            sb.AppendLine("* Generated by: Ptolemy.Argo");
            sb.AppendLine($"* Target: {request.NetList}");

            sb.AppendLine(
                $".param vtp=AGAUSS({request.Transistors.Vtp.Threshold},{request.Transistors.Vtp.Sigma},{request.Transistors.Vtp.Deviation}) vtp=AGAUSS({request.Transistors.Vtp.Threshold},{request.Transistors.Vtp.Sigma},{request.Transistors.Vtp.Deviation})");
            sb.AppendLine(".option PARHIER=LOCAL");
            sb.AppendLine($".option SEED={request.Seed}");
            sb.AppendLine($".temp {request.Temperature}");
            sb.AppendLine($".IC {string.Join(" ", request.IcCommands)}");
            sb.AppendLine($"VDD VDD! 0 {request.Vdd}V");
            sb.AppendLine($"VGND GND! 0 {request.Gnd}V");
            foreach (var include in request.Includes) {
                sb.AppendLine($".include '{include}'");
            }

            // Read NetList
            try {
                using (var sr = new StreamReader(request.NetList)) sb.AppendLine(sr.ReadToEnd());
            }
            catch (FileNotFoundException) {
                throw new ArgoException($"NetList file not found: path={request.NetList}");
            }
            catch (Exception e) {
                throw new ArgoException($"Unknown error has occured\n\tinnerException: {e}");
            }

            sb.AppendLine(
                $".tran {request.Time.Step} {request.Time.Stop} start={request.Time.Start} uic sweep monte={request.Sweep} firstrun={request.SweepStart}");
            sb.AppendLine(".option opfile=0");

            sb.AppendLine($".print {string.Join(" ", request.Signals.Select(x => $"V({x})"))}");
            sb.AppendLine(".end");

            using (var sw = new StreamWriter(path, false, new UTF8Encoding(false))) {
                sw.WriteLine(sb.ToString());
            }

            return path;
        }
    }
}